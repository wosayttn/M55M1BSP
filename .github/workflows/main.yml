name: Smart ARM Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      context:
        description: 'Build context'
        required: false
        default: 'Debug'
      project:
        description: 'Path to a specific .csolution.yml (optional)'
        required: false

jobs:
  detect-toolchain:
    runs-on: ubuntu-latest
    outputs:
      gcc: ${{ steps.set.outputs.gcc }}
      mdk: ${{ steps.set.outputs.mdk }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Detect toolchains
      id: set
      run: |
        echo "Scanning for .csolution.yml..."

        context="${{ github.event.inputs.context }}"
        single="${{ github.event.inputs.project }}"

        if [ -n "$single" ]; then
          files="$single"
        else
          files=$(find ./SampleCode/CortexM55 -name "*.csolution.yml")
        fi

        gcc_list=()
        mdk_list=()

        for file in $files; do
          echo "Checking $file"
          if grep -q "GCC" "$file"; then
            gcc_list+=("$file")
          elif grep -q "ARMCC" "$file"; then
            mdk_list+=("$file")
          fi
        done

        # 用 jq 產生 JSON 陣列（即使空也是 []）
        echo "gcc=$(jq -nc '$ARGS.positional // []' --args "${gcc_list[@]}")" >> $GITHUB_OUTPUT
        echo "mdk=$(jq -nc '$ARGS.positional // []' --args "${mdk_list[@]}")" >> $GITHUB_OUTPUT

  build-gcc:
    needs: detect-toolchain
    if: needs.detect-toolchain.outputs.gcc != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-toolchain.outputs.gcc) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install CMSIS Toolbox + GCC
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi build-essential unzip wget
        wget https://github.com/Open-CMSIS-Pack/devtools/releases/download/1.16.0/cmsis-toolbox-linux-amd64.zip
        unzip cmsis-toolbox-linux-amd64.zip -d toolbox
        sudo mv toolbox/* /usr/local/bin

    - name: Build with GCC
      run: |
        context="${{ github.event.inputs.context || 'Debug' }}"
        project="${{ matrix.project }}"
        echo "Building: $project (context: $context)"
        csolution convert -s "$project" -c "$context"
        find . -name '*.cprj' | grep "$(dirname "$project")" | while read -r cprj; do
          cbuild "$cprj"
        done

  build-mdk:
    needs: detect-toolchain
    if: needs.detect-toolchain.outputs.mdk != '[]'
    runs-on: windows-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-toolchain.outputs.mdk) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup CMSIS Toolbox
      run: |
        Invoke-WebRequest -Uri "https://github.com/Open-CMSIS-Pack/devtools/releases/download/1.16.0/cmsis-toolbox-windows-amd64.zip" -OutFile "cmsis-toolbox.zip"
        Expand-Archive -Path "cmsis-toolbox.zip" -DestinationPath "cmsis-toolbox"
        $env:Path += ";$PWD\cmsis-toolbox"

    - name: Build with MDK
      run: |
        $project = "${{ matrix.project }}"
        $context = "${{ github.event.inputs.context || 'Debug' }}"
        Write-Host "Building: $project (context: $context)"
        csolution convert -s $project -c $context

        Get-ChildItem -Recurse -Filter *.uvprojx | ForEach-Object {
          & "C:\Keil_v5\UV4\UV4.exe" -b $_.FullName -j0 -o build.log
        }
